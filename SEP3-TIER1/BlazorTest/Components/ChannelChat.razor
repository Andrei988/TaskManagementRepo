@page "/chat"
@using BlazorTest.Controllers
@using BlazorTest.Model
@using BlazorTest.Services
@using Newtonsoft.Json
@using Task = System.Threading.Tasks.Task
@inject Networking.AsyncClient AsyncClient
@inject ChannelChatController controller
@inject AppData appData


    <div class="container-fluid h-100">
        <div class="row justify-content-center h-100">
            <div class="col-md-4 col-xl-3 chat">
                <div class="card mb-sm-3 mb-md-0 contacts_card" id="chatCard">
                    <div class="card-body contacts_body">
                        <ul class="contacts">

                            @if (ChannelUsers != null)
                            {
                                @foreach (var user in ChannelUsers)
                                {
                                    <li id="userChannel">
                                        @user.Username &nbsp;&nbsp;&nbsp;&nbsp;
                                        @if (appData.Username == Admin)
                                        {
                                            if (user.Username != Admin)
                                            {
                                                <button class="btn btn-primary" @onclick="@(e => KickUser(user.Username))">Kick</button>
                                            }
                                        }
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
            <div class="col-md-8 col-xl-6 chat">
                <div class="card" id="chatCard">
                    <div class="card-header msg_head">
                        <div class="d-flex bd-highlight">
                            <div class="user_info">
                                <span>#@ChannelId @ChannelTitle</span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body msg_card_body">

                        @if (Messages != null)
                        {
                            @foreach (var message in Messages)
                            {
                                if (message.Sender == appData.Username)
                                {
                                    <div class="d-flex justify-content-end mb-4">
                                        <div class="msg_cotainer_send">
                                            @message.Content
                                            <span class="msg_time">@message.Sender</span>
                                        </div>
                                        
                                    </div>
                                } else
                                {
                                    <div class="d-flex justify-content-start mb-4">
                                        <div class="msg_cotainer">
                                            <span class="msg_time">@message.Sender</span>
                                            @message.Content
                                            <span class="msg_time">@message.Sender</span>
                                        </div>
                                        
                                    </div>
                                }
                            }
                        }
                    </div>
                    <div class="card-footer">
                        <div class="input-group">
                            <textarea name="" class="form-control type_msg" placeholder="Type your message..." @bind="MessageContent"></textarea>
                            <div class="input-group-append">
                                <span class="input-group-text send_btn" @onclick="@(e => SendMessage(MessageContent))"><i class="fas fa-location-arrow">Send</i></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<div class="container h-100" id="inviteDiv">

    @if (appData.Username == Admin)
    {
        <div class="card projectCard" id="inviteCard">
            <div class="card-header projectCardHeader" id="inviteCardHeader">
                Channel id : #@ChannelId
            </div>
            <div class="card-body" id="inviteCardBody">
                <input type="text" id="title" @bind="InviteUsername" class="form-control" placeholder="Username" />
            </div>
            <div class="card-footer projectCardFooter" id="inviteCardFooter">
                <a @onclick="@AddUser" class="btn btn-primary btn-sm">Invite user</a>
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public string Admin { get; set; }

    [Parameter]
    public int ChannelId { get; set; }

    [Parameter]
    public string ChannelTitle { get; set; }

    private List<ChannelUser> ChannelUsers { get; set; }
    private List<CMessage> Messages { get; set; }

    public string MessageContent { get; set; }

    public string InitJsonMessage { get; set; }
    public Message InitMessage { get; set; }

    public string InviteUsername { get; set; }

    public async Task<string> KickUser(string Username)
    {
        try
        {
            var user = ChannelUsers.SingleOrDefault(x => x.Username == Username && x.ChannelId == ChannelId);
            ChannelUsers.Remove(user);
            return await controller.DeleteFromChannel(AsyncClient, ChannelId, Username);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
    }

    public async Task<string> AddUser()
    {
        try
        {
            ChannelUsers.Add(new ChannelUser{
                Username = InviteUsername,
                ChannelId = ChannelId
            });
            return await controller.AddToChannel(AsyncClient, ChannelId, InviteUsername);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        
    }

    public async Task SendMessage(string content)
    {
        try
        {
            Messages.Add(new CMessage{
                Sender = appData.Username,
                TimeSent = DateTime.Now,
                Content = content
            });

            MessageContent = "";

            await controller.SendMessage(AsyncClient, ChannelId, appData.Username, Messages[Messages.Count - 1].Content);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitJsonMessage = await controller.InitChat(AsyncClient, ChannelId);
            await base.OnInitializedAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

    }

    protected override async Task OnParametersSetAsync()
    {

        try
        {
            InitMessage = JsonConvert.DeserializeObject<Message>(InitJsonMessage);
            ChannelUsers = InitMessage.Fields.ChannelUsers as List<ChannelUser>;
            Messages = InitMessage.Fields.ChannelMessages;
            await base.OnInitializedAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        
    }

}
